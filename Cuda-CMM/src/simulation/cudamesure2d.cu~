#include "cudamesure2d.h"
#include "../hermite/cudahermite2d.h"
#include "../grid/cudagrid2d.h"





__global__ void Compute_Energy(ptype *E, ptype *psi, int N, int NX, int NY, ptype h){

  int idx = threadIdx.x;
  int stride_x = blockDim.x;

  for(int i = idx; i < N; i+=stride_x){

    atomicAdd(E, 0.5*h * h * (psi[i + N] * psi[i + N] + psi[i + 2 * N] * psi[i + 2 * N]));
  }

}

__global__ void Compute_Enstrophy(ptype *Ens, ptype *W, int N, int NX, int NY, ptype h){

  int idx = threadIdx.x;
  int stride_x = blockDim.x;

  for(int i = idx; i < N; i+=stride_x){

    atomicAdd(Ens, 0.5 * h * h * (W[i] * W[i]) );
  }
  
}

__global__ void Compute_Palinstrophy(ptype *Pal, ptype *W, ptype *W_hat, int N, int NX, int NY, ptype h){

  int idx = threadIdx.x;
  int stride_x = blockDim.x;
  //  kernel_fft_dx<<<Grid_coarse->blocksPerGrid, Grid_coarse->threadsPerBlock>>>(W_hat, &W_hat[Grid_coarse->N], Grid_coarse->NX, Grid_coarse->NY, Grid_coarse->h);
  //kernel_fft_dy<<<Grid_coarse->blocksPerGrid, Grid_coarse->threadsPerBlock>>>(W_hat, &W_hat[2*Grid_coarse->N], Grid_coarse->NX, Grid_coarse->NY, Grid_coarse->h);
  for(int i = idx; i < N; i+=stride_x){

    atomicAdd(Pal, h * h * (1) ); //use  into the Fourier space WIP
  }
  

}


//kernel_fft_dx<<<x,x>>>() remplacer psi par omega
// meme chose _dy

// cufftExecZ2Z(cufftPlan_coarse, Psi_hat, Psi_complex, CUFFT_INVERSE)


//	kernel_fft_dx<<<Grid_coarse->blocksPerGrid, Grid_coarse->threadsPerBlock>>>(Psi_hat, &Psi_hat[Grid_coarse->N], Grid_coarse->NX, Grid_coarse->NY, Grid_coarse->h);										// x-derivative in Fourier space
//kernel_fft_dy<<<Grid_coarse->blocksPerGrid, Grid_coarse->threadsPerBlock>>>(Psi_hat, &Psi_hat[2*Grid_coarse->N], Grid_coarse->NX, Grid_coarse->NY, Grid_coarse->h);										// y-derivative in Fourier space					